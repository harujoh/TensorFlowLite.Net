// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace tflite
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct TensorMap : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static TensorMap GetRootAsTensorMap(ByteBuffer _bb) { return GetRootAsTensorMap(_bb, new TensorMap()); }
  public static TensorMap GetRootAsTensorMap(ByteBuffer _bb, TensorMap obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TensorMap __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public uint TensorIndex { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<tflite.TensorMap> CreateTensorMap(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      uint tensor_index = 0) {
    builder.StartTable(2);
    TensorMap.AddTensorIndex(builder, tensor_index);
    TensorMap.AddName(builder, nameOffset);
    return TensorMap.EndTensorMap(builder);
  }

  public static void StartTensorMap(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddTensorIndex(FlatBufferBuilder builder, uint tensorIndex) { builder.AddUint(1, tensorIndex, 0); }
  public static Offset<tflite.TensorMap> EndTensorMap(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<tflite.TensorMap>(o);
  }
};


}
