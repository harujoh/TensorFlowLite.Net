// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace tflite
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct CumsumOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CumsumOptions GetRootAsCumsumOptions(ByteBuffer _bb) { return GetRootAsCumsumOptions(_bb, new CumsumOptions()); }
  public static CumsumOptions GetRootAsCumsumOptions(ByteBuffer _bb, CumsumOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CumsumOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool Exclusive { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool Reverse { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<tflite.CumsumOptions> CreateCumsumOptions(FlatBufferBuilder builder,
      bool exclusive = false,
      bool reverse = false) {
    builder.StartTable(2);
    CumsumOptions.AddReverse(builder, reverse);
    CumsumOptions.AddExclusive(builder, exclusive);
    return CumsumOptions.EndCumsumOptions(builder);
  }

  public static void StartCumsumOptions(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddExclusive(FlatBufferBuilder builder, bool exclusive) { builder.AddBool(0, exclusive, false); }
  public static void AddReverse(FlatBufferBuilder builder, bool reverse) { builder.AddBool(1, reverse, false); }
  public static Offset<tflite.CumsumOptions> EndCumsumOptions(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<tflite.CumsumOptions>(o);
  }
};


}
