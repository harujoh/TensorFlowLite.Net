// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace tflite
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct SignatureDef : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static SignatureDef GetRootAsSignatureDef(ByteBuffer _bb) { return GetRootAsSignatureDef(_bb, new SignatureDef()); }
  public static SignatureDef GetRootAsSignatureDef(ByteBuffer _bb, SignatureDef obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SignatureDef __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public tflite.TensorMap? Inputs(int j) { int o = __p.__offset(4); return o != 0 ? (tflite.TensorMap?)(new tflite.TensorMap()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int InputsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public tflite.TensorMap? Outputs(int j) { int o = __p.__offset(6); return o != 0 ? (tflite.TensorMap?)(new tflite.TensorMap()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int OutputsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string MethodName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMethodNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetMethodNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetMethodNameArray() { return __p.__vector_as_array<byte>(8); }
  public string Key { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetKeyBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetKeyBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetKeyArray() { return __p.__vector_as_array<byte>(10); }

  public static Offset<tflite.SignatureDef> CreateSignatureDef(FlatBufferBuilder builder,
      VectorOffset inputsOffset = default(VectorOffset),
      VectorOffset outputsOffset = default(VectorOffset),
      StringOffset method_nameOffset = default(StringOffset),
      StringOffset keyOffset = default(StringOffset)) {
    builder.StartTable(4);
    SignatureDef.AddKey(builder, keyOffset);
    SignatureDef.AddMethodName(builder, method_nameOffset);
    SignatureDef.AddOutputs(builder, outputsOffset);
    SignatureDef.AddInputs(builder, inputsOffset);
    return SignatureDef.EndSignatureDef(builder);
  }

  public static void StartSignatureDef(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddInputs(FlatBufferBuilder builder, VectorOffset inputsOffset) { builder.AddOffset(0, inputsOffset.Value, 0); }
  public static VectorOffset CreateInputsVector(FlatBufferBuilder builder, Offset<tflite.TensorMap>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateInputsVectorBlock(FlatBufferBuilder builder, Offset<tflite.TensorMap>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartInputsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddOutputs(FlatBufferBuilder builder, VectorOffset outputsOffset) { builder.AddOffset(1, outputsOffset.Value, 0); }
  public static VectorOffset CreateOutputsVector(FlatBufferBuilder builder, Offset<tflite.TensorMap>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateOutputsVectorBlock(FlatBufferBuilder builder, Offset<tflite.TensorMap>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartOutputsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMethodName(FlatBufferBuilder builder, StringOffset methodNameOffset) { builder.AddOffset(2, methodNameOffset.Value, 0); }
  public static void AddKey(FlatBufferBuilder builder, StringOffset keyOffset) { builder.AddOffset(3, keyOffset.Value, 0); }
  public static Offset<tflite.SignatureDef> EndSignatureDef(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<tflite.SignatureDef>(o);
  }
};


}
